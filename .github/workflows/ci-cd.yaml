name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
env:
  docker-registry: guysaar8/comet-home
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd src
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Python tests
        run: |
          cd src
          python -m pytest tests/ --cov=. --cov-report=xml

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: Run Terraform tests
        run: |
          cd infra
          terraform init
          terraform validate

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Run Helm lint
        run: helm lint ./helm-hello-world

      - name: Run Helm template validation
        run: helm template ./helm-hello-world --debug

      - name: Install Helm unittest plugin
        run: |
          helm plugin install https://github.com/quintush/helm-unittest

      - name: Run Helm unit tests
        run: helm unittest ./helm-hello-world

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'build-and-deploy')
    permissions:
      id-token: write
      contents: read
    outputs:
      image-tag: ${{ steps.docker-tag.outputs.TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-eks-deployer-dev
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker tag
        id: docker-tag
        run: |
          COMMIT_ID=${GITHUB_SHA::7}
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "TAG=${COMMIT_ID}" >> $GITHUB_OUTPUT
          else
            echo "TAG=pr${{ github.event.pull_request.number }}-${COMMIT_ID}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./src
          push: true
          tags: ${{ env.docker-registry }}:${{ steps.docker-tag.outputs.TAG }}

  deploy:
    name: Deploy to EKS with Helm
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'build-and-deploy')
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-eks-deployer-dev
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region us-east-1 --name ${{ env.EKS_CLUSTER_NAME }}
        env:
          EKS_CLUSTER_NAME: main-eks

      - name: Deploy with Helm
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            export ENV=dev
          else
            export ENV=prd
          fi
          helm upgrade --install hello-world ./helm-hello-world \
            --namespace $ENV \
            --set image.repository=${{ env.docker-registry }} \
            --set image.tag=${{ needs.build-and-push.outputs.image-tag }} \
            --set env=$ENV
